// Autogenerated from Pigeon (v1.0.19), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import <Foundation/Foundation.h>
@protocol FlutterBinaryMessenger;
@protocol FlutterMessageCodec;
@class FlutterError;
@class FlutterStandardTypedData;

NS_ASSUME_NONNULL_BEGIN

@class BooleanWrapper;
@class NumberWrapper;
@class StringWrapper;
@class ListWrapper;
@class PebbleFirmwarePigeon;
@class PebbleDevicePigeon;
@class PebbleScanDevicePigeon;
@class WatchConnectionStatePigeon;
@class TimelinePinPigeon;
@class ActionTrigger;
@class ActionResponsePigeon;
@class NotifActionExecuteReq;
@class NotificationPigeon;
@class AppEntriesPigeon;
@class PbwAppInfo;
@class WatchappInfo;
@class WatchResource;
@class InstallData;
@class AppInstallStatus;
@class ScreenshotResult;
@class AppLogEntry;

@interface BooleanWrapper : NSObject
+ (instancetype)makeWithValue:(nullable NSNumber *)value;
@property(nonatomic, strong, nullable) NSNumber * value;
@end

@interface NumberWrapper : NSObject
+ (instancetype)makeWithValue:(nullable NSNumber *)value;
@property(nonatomic, strong, nullable) NSNumber * value;
@end

@interface StringWrapper : NSObject
+ (instancetype)makeWithValue:(nullable NSString *)value;
@property(nonatomic, copy, nullable) NSString * value;
@end

@interface ListWrapper : NSObject
+ (instancetype)makeWithValue:(nullable NSArray *)value;
@property(nonatomic, strong, nullable) NSArray * value;
@end

@interface PebbleFirmwarePigeon : NSObject
+ (instancetype)makeWithTimestamp:(nullable NSNumber *)timestamp
    version:(nullable NSString *)version
    gitHash:(nullable NSString *)gitHash
    isRecovery:(nullable NSNumber *)isRecovery
    hardwarePlatform:(nullable NSNumber *)hardwarePlatform
    metadataVersion:(nullable NSNumber *)metadataVersion;
@property(nonatomic, strong, nullable) NSNumber * timestamp;
@property(nonatomic, copy, nullable) NSString * version;
@property(nonatomic, copy, nullable) NSString * gitHash;
@property(nonatomic, strong, nullable) NSNumber * isRecovery;
@property(nonatomic, strong, nullable) NSNumber * hardwarePlatform;
@property(nonatomic, strong, nullable) NSNumber * metadataVersion;
@end

@interface PebbleDevicePigeon : NSObject
+ (instancetype)makeWithName:(nullable NSString *)name
    address:(nullable NSString *)address
    runningFirmware:(nullable PebbleFirmwarePigeon *)runningFirmware
    recoveryFirmware:(nullable PebbleFirmwarePigeon *)recoveryFirmware
    model:(nullable NSNumber *)model
    bootloaderTimestamp:(nullable NSNumber *)bootloaderTimestamp
    board:(nullable NSString *)board
    serial:(nullable NSString *)serial
    language:(nullable NSString *)language
    languageVersion:(nullable NSNumber *)languageVersion
    isUnfaithful:(nullable NSNumber *)isUnfaithful;
@property(nonatomic, copy, nullable) NSString * name;
@property(nonatomic, copy, nullable) NSString * address;
@property(nonatomic, strong, nullable) PebbleFirmwarePigeon * runningFirmware;
@property(nonatomic, strong, nullable) PebbleFirmwarePigeon * recoveryFirmware;
@property(nonatomic, strong, nullable) NSNumber * model;
@property(nonatomic, strong, nullable) NSNumber * bootloaderTimestamp;
@property(nonatomic, copy, nullable) NSString * board;
@property(nonatomic, copy, nullable) NSString * serial;
@property(nonatomic, copy, nullable) NSString * language;
@property(nonatomic, strong, nullable) NSNumber * languageVersion;
@property(nonatomic, strong, nullable) NSNumber * isUnfaithful;
@end

@interface PebbleScanDevicePigeon : NSObject
+ (instancetype)makeWithName:(nullable NSString *)name
    address:(nullable NSString *)address
    version:(nullable NSString *)version
    serialNumber:(nullable NSString *)serialNumber
    color:(nullable NSNumber *)color
    runningPRF:(nullable NSNumber *)runningPRF
    firstUse:(nullable NSNumber *)firstUse;
@property(nonatomic, copy, nullable) NSString * name;
@property(nonatomic, copy, nullable) NSString * address;
@property(nonatomic, copy, nullable) NSString * version;
@property(nonatomic, copy, nullable) NSString * serialNumber;
@property(nonatomic, strong, nullable) NSNumber * color;
@property(nonatomic, strong, nullable) NSNumber * runningPRF;
@property(nonatomic, strong, nullable) NSNumber * firstUse;
@end

@interface WatchConnectionStatePigeon : NSObject
+ (instancetype)makeWithIsConnected:(nullable NSNumber *)isConnected
    isConnecting:(nullable NSNumber *)isConnecting
    currentWatchAddress:(nullable NSString *)currentWatchAddress
    currentConnectedWatch:(nullable PebbleDevicePigeon *)currentConnectedWatch;
@property(nonatomic, strong, nullable) NSNumber * isConnected;
@property(nonatomic, strong, nullable) NSNumber * isConnecting;
@property(nonatomic, copy, nullable) NSString * currentWatchAddress;
@property(nonatomic, strong, nullable) PebbleDevicePigeon * currentConnectedWatch;
@end

@interface TimelinePinPigeon : NSObject
+ (instancetype)makeWithItemId:(nullable NSString *)itemId
    parentId:(nullable NSString *)parentId
    timestamp:(nullable NSNumber *)timestamp
    type:(nullable NSNumber *)type
    duration:(nullable NSNumber *)duration
    isVisible:(nullable NSNumber *)isVisible
    isFloating:(nullable NSNumber *)isFloating
    isAllDay:(nullable NSNumber *)isAllDay
    persistQuickView:(nullable NSNumber *)persistQuickView
    layout:(nullable NSNumber *)layout
    attributesJson:(nullable NSString *)attributesJson
    actionsJson:(nullable NSString *)actionsJson;
@property(nonatomic, copy, nullable) NSString * itemId;
@property(nonatomic, copy, nullable) NSString * parentId;
@property(nonatomic, strong, nullable) NSNumber * timestamp;
@property(nonatomic, strong, nullable) NSNumber * type;
@property(nonatomic, strong, nullable) NSNumber * duration;
@property(nonatomic, strong, nullable) NSNumber * isVisible;
@property(nonatomic, strong, nullable) NSNumber * isFloating;
@property(nonatomic, strong, nullable) NSNumber * isAllDay;
@property(nonatomic, strong, nullable) NSNumber * persistQuickView;
@property(nonatomic, strong, nullable) NSNumber * layout;
@property(nonatomic, copy, nullable) NSString * attributesJson;
@property(nonatomic, copy, nullable) NSString * actionsJson;
@end

@interface ActionTrigger : NSObject
+ (instancetype)makeWithItemId:(nullable NSString *)itemId
    actionId:(nullable NSNumber *)actionId
    attributesJson:(nullable NSString *)attributesJson;
@property(nonatomic, copy, nullable) NSString * itemId;
@property(nonatomic, strong, nullable) NSNumber * actionId;
@property(nonatomic, copy, nullable) NSString * attributesJson;
@end

@interface ActionResponsePigeon : NSObject
+ (instancetype)makeWithSuccess:(nullable NSNumber *)success
    attributesJson:(nullable NSString *)attributesJson;
@property(nonatomic, strong, nullable) NSNumber * success;
@property(nonatomic, copy, nullable) NSString * attributesJson;
@end

@interface NotifActionExecuteReq : NSObject
+ (instancetype)makeWithItemId:(nullable NSString *)itemId
    actionId:(nullable NSNumber *)actionId
    responseText:(nullable NSString *)responseText;
@property(nonatomic, copy, nullable) NSString * itemId;
@property(nonatomic, strong, nullable) NSNumber * actionId;
@property(nonatomic, copy, nullable) NSString * responseText;
@end

@interface NotificationPigeon : NSObject
+ (instancetype)makeWithPackageId:(nullable NSString *)packageId
    notifId:(nullable NSNumber *)notifId
    appName:(nullable NSString *)appName
    tagId:(nullable NSString *)tagId
    tagName:(nullable NSString *)tagName
    title:(nullable NSString *)title
    text:(nullable NSString *)text
    category:(nullable NSString *)category
    color:(nullable NSNumber *)color
    messagesJson:(nullable NSString *)messagesJson
    actionsJson:(nullable NSString *)actionsJson;
@property(nonatomic, copy, nullable) NSString * packageId;
@property(nonatomic, strong, nullable) NSNumber * notifId;
@property(nonatomic, copy, nullable) NSString * appName;
@property(nonatomic, copy, nullable) NSString * tagId;
@property(nonatomic, copy, nullable) NSString * tagName;
@property(nonatomic, copy, nullable) NSString * title;
@property(nonatomic, copy, nullable) NSString * text;
@property(nonatomic, copy, nullable) NSString * category;
@property(nonatomic, strong, nullable) NSNumber * color;
@property(nonatomic, copy, nullable) NSString * messagesJson;
@property(nonatomic, copy, nullable) NSString * actionsJson;
@end

@interface AppEntriesPigeon : NSObject
+ (instancetype)makeWithAppName:(nullable NSArray<NSString *> *)appName
    packageId:(nullable NSArray<NSString *> *)packageId;
@property(nonatomic, strong, nullable) NSArray<NSString *> * appName;
@property(nonatomic, strong, nullable) NSArray<NSString *> * packageId;
@end

@interface PbwAppInfo : NSObject
+ (instancetype)makeWithIsValid:(nullable NSNumber *)isValid
    uuid:(nullable NSString *)uuid
    shortName:(nullable NSString *)shortName
    longName:(nullable NSString *)longName
    companyName:(nullable NSString *)companyName
    versionCode:(nullable NSNumber *)versionCode
    versionLabel:(nullable NSString *)versionLabel
    appKeys:(nullable NSDictionary<NSString *, NSNumber *> *)appKeys
    capabilities:(nullable NSArray<NSString *> *)capabilities
    resources:(nullable NSArray<WatchResource *> *)resources
    sdkVersion:(nullable NSString *)sdkVersion
    targetPlatforms:(nullable NSArray<NSString *> *)targetPlatforms
    watchapp:(nullable WatchappInfo *)watchapp;
@property(nonatomic, strong, nullable) NSNumber * isValid;
@property(nonatomic, copy, nullable) NSString * uuid;
@property(nonatomic, copy, nullable) NSString * shortName;
@property(nonatomic, copy, nullable) NSString * longName;
@property(nonatomic, copy, nullable) NSString * companyName;
@property(nonatomic, strong, nullable) NSNumber * versionCode;
@property(nonatomic, copy, nullable) NSString * versionLabel;
@property(nonatomic, strong, nullable) NSDictionary<NSString *, NSNumber *> * appKeys;
@property(nonatomic, strong, nullable) NSArray<NSString *> * capabilities;
@property(nonatomic, strong, nullable) NSArray<WatchResource *> * resources;
@property(nonatomic, copy, nullable) NSString * sdkVersion;
@property(nonatomic, strong, nullable) NSArray<NSString *> * targetPlatforms;
@property(nonatomic, strong, nullable) WatchappInfo * watchapp;
@end

@interface WatchappInfo : NSObject
+ (instancetype)makeWithWatchface:(nullable NSNumber *)watchface
    hiddenApp:(nullable NSNumber *)hiddenApp
    onlyShownOnCommunication:(nullable NSNumber *)onlyShownOnCommunication;
@property(nonatomic, strong, nullable) NSNumber * watchface;
@property(nonatomic, strong, nullable) NSNumber * hiddenApp;
@property(nonatomic, strong, nullable) NSNumber * onlyShownOnCommunication;
@end

@interface WatchResource : NSObject
+ (instancetype)makeWithFile:(nullable NSString *)file
    menuIcon:(nullable NSNumber *)menuIcon
    name:(nullable NSString *)name
    type:(nullable NSString *)type;
@property(nonatomic, copy, nullable) NSString * file;
@property(nonatomic, strong, nullable) NSNumber * menuIcon;
@property(nonatomic, copy, nullable) NSString * name;
@property(nonatomic, copy, nullable) NSString * type;
@end

@interface InstallData : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithUri:(NSString *)uri
    appInfo:(PbwAppInfo *)appInfo;
@property(nonatomic, copy) NSString * uri;
@property(nonatomic, strong) PbwAppInfo * appInfo;
@end

@interface AppInstallStatus : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithProgress:(NSNumber *)progress
    isInstalling:(NSNumber *)isInstalling;
@property(nonatomic, strong) NSNumber * progress;
@property(nonatomic, strong) NSNumber * isInstalling;
@end

@interface ScreenshotResult : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithSuccess:(NSNumber *)success
    imagePath:(nullable NSString *)imagePath;
@property(nonatomic, strong) NSNumber * success;
@property(nonatomic, copy, nullable) NSString * imagePath;
@end

@interface AppLogEntry : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithUuid:(NSString *)uuid
    timestamp:(NSNumber *)timestamp
    level:(NSNumber *)level
    lineNumber:(NSNumber *)lineNumber
    filename:(NSString *)filename
    message:(NSString *)message;
@property(nonatomic, copy) NSString * uuid;
@property(nonatomic, strong) NSNumber * timestamp;
@property(nonatomic, strong) NSNumber * level;
@property(nonatomic, strong) NSNumber * lineNumber;
@property(nonatomic, copy) NSString * filename;
@property(nonatomic, copy) NSString * message;
@end

/// The codec used by ScanCallbacks.
NSObject<FlutterMessageCodec> *ScanCallbacksGetCodec(void);

@interface ScanCallbacks : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
- (void)onScanUpdatePebbles:(ListWrapper *)pebbles completion:(void(^)(NSError *_Nullable))completion;
- (void)onScanStartedWithCompletion:(void(^)(NSError *_Nullable))completion;
- (void)onScanStoppedWithCompletion:(void(^)(NSError *_Nullable))completion;
@end
/// The codec used by ConnectionCallbacks.
NSObject<FlutterMessageCodec> *ConnectionCallbacksGetCodec(void);

@interface ConnectionCallbacks : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
- (void)onWatchConnectionStateChangedNewState:(WatchConnectionStatePigeon *)newState completion:(void(^)(NSError *_Nullable))completion;
@end
/// The codec used by RawIncomingPacketsCallbacks.
NSObject<FlutterMessageCodec> *RawIncomingPacketsCallbacksGetCodec(void);

@interface RawIncomingPacketsCallbacks : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
- (void)onPacketReceivedListOfBytes:(ListWrapper *)listOfBytes completion:(void(^)(NSError *_Nullable))completion;
@end
/// The codec used by PairCallbacks.
NSObject<FlutterMessageCodec> *PairCallbacksGetCodec(void);

@interface PairCallbacks : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
- (void)onWatchPairCompleteAddress:(StringWrapper *)address completion:(void(^)(NSError *_Nullable))completion;
@end
/// The codec used by CalendarCallbacks.
NSObject<FlutterMessageCodec> *CalendarCallbacksGetCodec(void);

@interface CalendarCallbacks : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
- (void)doFullCalendarSyncWithCompletion:(void(^)(NSError *_Nullable))completion;
@end
/// The codec used by TimelineCallbacks.
NSObject<FlutterMessageCodec> *TimelineCallbacksGetCodec(void);

@interface TimelineCallbacks : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
- (void)syncTimelineToWatchWithCompletion:(void(^)(NSError *_Nullable))completion;
- (void)handleTimelineActionActionTrigger:(nullable ActionTrigger *)actionTrigger completion:(void(^)(ActionResponsePigeon *_Nullable, NSError *_Nullable))completion;
@end
/// The codec used by IntentCallbacks.
NSObject<FlutterMessageCodec> *IntentCallbacksGetCodec(void);

@interface IntentCallbacks : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
- (void)openUriUri:(StringWrapper *)uri completion:(void(^)(NSError *_Nullable))completion;
@end
/// The codec used by BackgroundAppInstallCallbacks.
NSObject<FlutterMessageCodec> *BackgroundAppInstallCallbacksGetCodec(void);

@interface BackgroundAppInstallCallbacks : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
- (void)beginAppInstallInstallData:(nullable InstallData *)installData completion:(void(^)(NSError *_Nullable))completion;
- (void)deleteAppUuid:(nullable StringWrapper *)uuid completion:(void(^)(NSError *_Nullable))completion;
@end
/// The codec used by AppInstallStatusCallbacks.
NSObject<FlutterMessageCodec> *AppInstallStatusCallbacksGetCodec(void);

@interface AppInstallStatusCallbacks : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
- (void)onStatusUpdatedStatus:(AppInstallStatus *)status completion:(void(^)(NSError *_Nullable))completion;
@end
/// The codec used by NotificationListening.
NSObject<FlutterMessageCodec> *NotificationListeningGetCodec(void);

@interface NotificationListening : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
- (void)handleNotificationNotification:(nullable NotificationPigeon *)notification completion:(void(^)(TimelinePinPigeon *_Nullable, NSError *_Nullable))completion;
- (void)dismissNotificationItemId:(StringWrapper *)itemId completion:(void(^)(NSError *_Nullable))completion;
@end
/// The codec used by AppLogCallbacks.
NSObject<FlutterMessageCodec> *AppLogCallbacksGetCodec(void);

@interface AppLogCallbacks : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
- (void)onLogReceivedEntry:(AppLogEntry *)entry completion:(void(^)(NSError *_Nullable))completion;
@end
/// The codec used by NotificationUtils.
NSObject<FlutterMessageCodec> *NotificationUtilsGetCodec(void);

@protocol NotificationUtils
/// @return `nil` only when `error != nil`.
- (void)dismissNotificationItemId:(nullable StringWrapper *)itemId completion:(void(^)(BooleanWrapper *_Nullable, FlutterError *_Nullable))completion;
/// @return `nil` only when `error != nil`.
- (void)dismissNotificationWatchItemId:(StringWrapper *)itemId error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (void)openNotificationItemId:(StringWrapper *)itemId error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (void)executeActionAction:(NotifActionExecuteReq *)action error:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void NotificationUtilsSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<NotificationUtils> *_Nullable api);

/// The codec used by ScanControl.
NSObject<FlutterMessageCodec> *ScanControlGetCodec(void);

@protocol ScanControl
/// @return `nil` only when `error != nil`.
- (void)startBleScanWithError:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (void)startClassicScanWithError:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void ScanControlSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<ScanControl> *_Nullable api);

/// The codec used by ConnectionControl.
NSObject<FlutterMessageCodec> *ConnectionControlGetCodec(void);

@protocol ConnectionControl
/// @return `nil` only when `error != nil`.
- (nullable BooleanWrapper *)isConnectedWithError:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (void)disconnectWithError:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (void)sendRawPacketListOfBytes:(ListWrapper *)listOfBytes error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (void)observeConnectionChangesWithError:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (void)cancelObservingConnectionChangesWithError:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void ConnectionControlSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<ConnectionControl> *_Nullable api);

/// The codec used by RawIncomingPacketsControl.
NSObject<FlutterMessageCodec> *RawIncomingPacketsControlGetCodec(void);

@protocol RawIncomingPacketsControl
/// @return `nil` only when `error != nil`.
- (void)observeIncomingPacketsWithError:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (void)cancelObservingIncomingPacketsWithError:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void RawIncomingPacketsControlSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<RawIncomingPacketsControl> *_Nullable api);

/// The codec used by UiConnectionControl.
NSObject<FlutterMessageCodec> *UiConnectionControlGetCodec(void);

@protocol UiConnectionControl
/// @return `nil` only when `error != nil`.
- (void)connectToWatchMacAddress:(StringWrapper *)macAddress error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (void)unpairWatchMacAddress:(StringWrapper *)macAddress error:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void UiConnectionControlSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<UiConnectionControl> *_Nullable api);

/// The codec used by NotificationsControl.
NSObject<FlutterMessageCodec> *NotificationsControlGetCodec(void);

@protocol NotificationsControl
/// @return `nil` only when `error != nil`.
- (void)sendTestNotificationWithError:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void NotificationsControlSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<NotificationsControl> *_Nullable api);

/// The codec used by IntentControl.
NSObject<FlutterMessageCodec> *IntentControlGetCodec(void);

@protocol IntentControl
/// @return `nil` only when `error != nil`.
- (void)notifyFlutterReadyForIntentsWithError:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (void)notifyFlutterNotReadyForIntentsWithError:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (void)waitForBootWithCompletion:(void(^)(BooleanWrapper *_Nullable, FlutterError *_Nullable))completion;
@end

extern void IntentControlSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<IntentControl> *_Nullable api);

/// The codec used by DebugControl.
NSObject<FlutterMessageCodec> *DebugControlGetCodec(void);

@protocol DebugControl
/// @return `nil` only when `error != nil`.
- (void)collectLogsWithError:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void DebugControlSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<DebugControl> *_Nullable api);

/// The codec used by TimelineControl.
NSObject<FlutterMessageCodec> *TimelineControlGetCodec(void);

@protocol TimelineControl
/// @return `nil` only when `error != nil`.
- (void)addPinPin:(nullable TimelinePinPigeon *)pin completion:(void(^)(NumberWrapper *_Nullable, FlutterError *_Nullable))completion;
/// @return `nil` only when `error != nil`.
- (void)removePinPinUuid:(nullable StringWrapper *)pinUuid completion:(void(^)(NumberWrapper *_Nullable, FlutterError *_Nullable))completion;
/// @return `nil` only when `error != nil`.
- (void)removeAllPinsWithCompletion:(void(^)(NumberWrapper *_Nullable, FlutterError *_Nullable))completion;
@end

extern void TimelineControlSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<TimelineControl> *_Nullable api);

/// The codec used by BackgroundSetupControl.
NSObject<FlutterMessageCodec> *BackgroundSetupControlGetCodec(void);

@protocol BackgroundSetupControl
/// @return `nil` only when `error != nil`.
- (void)setupBackgroundCallbackHandle:(NumberWrapper *)callbackHandle error:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void BackgroundSetupControlSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<BackgroundSetupControl> *_Nullable api);

/// The codec used by BackgroundControl.
NSObject<FlutterMessageCodec> *BackgroundControlGetCodec(void);

@protocol BackgroundControl
/// @return `nil` only when `error != nil`.
- (void)notifyFlutterBackgroundStartedWithCompletion:(void(^)(NumberWrapper *_Nullable, FlutterError *_Nullable))completion;
@end

extern void BackgroundControlSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<BackgroundControl> *_Nullable api);

/// The codec used by PermissionCheck.
NSObject<FlutterMessageCodec> *PermissionCheckGetCodec(void);

@protocol PermissionCheck
/// @return `nil` only when `error != nil`.
- (nullable BooleanWrapper *)hasLocationPermissionWithError:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable BooleanWrapper *)hasCalendarPermissionWithError:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable BooleanWrapper *)hasNotificationAccessWithError:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable BooleanWrapper *)hasBatteryExclusionEnabledWithError:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void PermissionCheckSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<PermissionCheck> *_Nullable api);

/// The codec used by PermissionControl.
NSObject<FlutterMessageCodec> *PermissionControlGetCodec(void);

@protocol PermissionControl
/// @return `nil` only when `error != nil`.
- (void)requestLocationPermissionWithCompletion:(void(^)(NumberWrapper *_Nullable, FlutterError *_Nullable))completion;
/// @return `nil` only when `error != nil`.
- (void)requestCalendarPermissionWithCompletion:(void(^)(NumberWrapper *_Nullable, FlutterError *_Nullable))completion;
/// @return `nil` only when `error != nil`.
- (void)requestNotificationAccessWithCompletion:(void(^)(FlutterError *_Nullable))completion;
/// @return `nil` only when `error != nil`.
- (void)requestBatteryExclusionWithCompletion:(void(^)(FlutterError *_Nullable))completion;
/// @return `nil` only when `error != nil`.
- (void)requestBluetoothPermissionsWithCompletion:(void(^)(NumberWrapper *_Nullable, FlutterError *_Nullable))completion;
/// @return `nil` only when `error != nil`.
- (void)openPermissionSettingsWithCompletion:(void(^)(FlutterError *_Nullable))completion;
@end

extern void PermissionControlSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<PermissionControl> *_Nullable api);

/// The codec used by CalendarControl.
NSObject<FlutterMessageCodec> *CalendarControlGetCodec(void);

@protocol CalendarControl
/// @return `nil` only when `error != nil`.
- (void)requestCalendarSyncWithError:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void CalendarControlSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<CalendarControl> *_Nullable api);

/// The codec used by PigeonLogger.
NSObject<FlutterMessageCodec> *PigeonLoggerGetCodec(void);

@protocol PigeonLogger
/// @return `nil` only when `error != nil`.
- (void)vMessage:(StringWrapper *)message error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (void)dMessage:(StringWrapper *)message error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (void)iMessage:(StringWrapper *)message error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (void)wMessage:(StringWrapper *)message error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (void)eMessage:(StringWrapper *)message error:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void PigeonLoggerSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<PigeonLogger> *_Nullable api);

/// The codec used by TimelineSyncControl.
NSObject<FlutterMessageCodec> *TimelineSyncControlGetCodec(void);

@protocol TimelineSyncControl
/// @return `nil` only when `error != nil`.
- (void)syncTimelineToWatchLaterWithError:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void TimelineSyncControlSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<TimelineSyncControl> *_Nullable api);

/// The codec used by WorkaroundsControl.
NSObject<FlutterMessageCodec> *WorkaroundsControlGetCodec(void);

@protocol WorkaroundsControl
/// @return `nil` only when `error != nil`.
- (nullable ListWrapper *)getNeededWorkaroundsWithError:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void WorkaroundsControlSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<WorkaroundsControl> *_Nullable api);

/// The codec used by AppInstallControl.
NSObject<FlutterMessageCodec> *AppInstallControlGetCodec(void);

@protocol AppInstallControl
/// @return `nil` only when `error != nil`.
- (void)getAppInfoLocalPbwUri:(nullable StringWrapper *)localPbwUri completion:(void(^)(PbwAppInfo *_Nullable, FlutterError *_Nullable))completion;
/// @return `nil` only when `error != nil`.
- (void)beginAppInstallInstallData:(nullable InstallData *)installData completion:(void(^)(BooleanWrapper *_Nullable, FlutterError *_Nullable))completion;
/// @return `nil` only when `error != nil`.
- (void)beginAppDeletionUuid:(nullable StringWrapper *)uuid completion:(void(^)(BooleanWrapper *_Nullable, FlutterError *_Nullable))completion;
/// @return `nil` only when `error != nil`.
- (void)insertAppIntoBlobDbUuidString:(nullable StringWrapper *)uuidString completion:(void(^)(NumberWrapper *_Nullable, FlutterError *_Nullable))completion;
/// @return `nil` only when `error != nil`.
- (void)removeAppFromBlobDbAppUuidString:(nullable StringWrapper *)appUuidString completion:(void(^)(NumberWrapper *_Nullable, FlutterError *_Nullable))completion;
/// @return `nil` only when `error != nil`.
- (void)removeAllAppsWithCompletion:(void(^)(NumberWrapper *_Nullable, FlutterError *_Nullable))completion;
/// @return `nil` only when `error != nil`.
- (void)subscribeToAppStatusWithError:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (void)unsubscribeFromAppStatusWithError:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (void)sendAppOrderToWatchUuidStringList:(nullable ListWrapper *)uuidStringList completion:(void(^)(NumberWrapper *_Nullable, FlutterError *_Nullable))completion;
@end

extern void AppInstallControlSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<AppInstallControl> *_Nullable api);

/// The codec used by AppLifecycleControl.
NSObject<FlutterMessageCodec> *AppLifecycleControlGetCodec(void);

@protocol AppLifecycleControl
/// @return `nil` only when `error != nil`.
- (void)openAppOnTheWatchUuidString:(nullable StringWrapper *)uuidString completion:(void(^)(BooleanWrapper *_Nullable, FlutterError *_Nullable))completion;
@end

extern void AppLifecycleControlSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<AppLifecycleControl> *_Nullable api);

/// The codec used by PackageDetails.
NSObject<FlutterMessageCodec> *PackageDetailsGetCodec(void);

@protocol PackageDetails
/// @return `nil` only when `error != nil`.
- (nullable AppEntriesPigeon *)getPackageListWithError:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void PackageDetailsSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<PackageDetails> *_Nullable api);

/// The codec used by ScreenshotsControl.
NSObject<FlutterMessageCodec> *ScreenshotsControlGetCodec(void);

@protocol ScreenshotsControl
/// @return `nil` only when `error != nil`.
- (void)takeWatchScreenshotWithCompletion:(void(^)(ScreenshotResult *_Nullable, FlutterError *_Nullable))completion;
@end

extern void ScreenshotsControlSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<ScreenshotsControl> *_Nullable api);

/// The codec used by AppLogControl.
NSObject<FlutterMessageCodec> *AppLogControlGetCodec(void);

@protocol AppLogControl
/// @return `nil` only when `error != nil`.
- (void)startSendingLogsWithError:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (void)stopSendingLogsWithError:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void AppLogControlSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<AppLogControl> *_Nullable api);

/// The codec used by KeepUnusedHack.
NSObject<FlutterMessageCodec> *KeepUnusedHackGetCodec(void);

@protocol KeepUnusedHack
/// @return `nil` only when `error != nil`.
- (void)keepPebbleScanDevicePigeonCls:(PebbleScanDevicePigeon *)cls error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (void)keepWatchResourceCls:(WatchResource *)cls error:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void KeepUnusedHackSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<KeepUnusedHack> *_Nullable api);

NS_ASSUME_NONNULL_END
